<%= javascript_include_tag 'jquery.tablesorter.min.js' %>
<%= javascript_include_tag 'jquery.quicksearch.js' %>
<%= javascript_include_tag 'jquery.session' %>
<%= javascript_include_tag 'jquery-ui.min.js' %>
<%= stylesheet_link_tag 'jquery-ui.css' %>


<% content_for :title, "Grading Queue - #{@course.name}" %>


<h1><%= link_to @course.display_for_course_page, course_path(@course), :class => "course" %></h1>
<%= render :partial => "layouts/grade_book_sub_menu" %>
<h2>Submitted <%= nomenclature_assignment_or_deliverable %>s</h2>

<!--<div class="rounded staff">-->
  <!--<%= image_tag("/images/professor.jpg", :size => "50x50", :border => "0", :alt => "Only faculty can see this information", :title => "Faculty Role") %>-->
  <!--<span class="instructions">Note: we will be improving this screen during the Spring 2013 semester by integrating in new student code. </span>-->
<!--</div>-->


<div>
  <!-- <div style='border-right: solid 3px #7f7f7f;'> -->

  <div id='filters'>
    <div id='filterBoxSearch'>
      <input id='filterBoxOne' placeholder='Student name / Team name / Deliverable' maxlength='30' size='30' type='text'/>
    </div>

    <div id='advanced_search_filters_div'>
      <table style="width: 100%; border-color: transparent;">
        <tr>
          <td>
            Teams: <br/>
            <input type="radio" id="filter_my_teams" name="teams" value="my_teams" checked/><label for="filter_my_teams">My
            Teams</label> <br/>
            <input type="radio" id="filter_all_teams" name="teams" value="all_teams"/><label for="filter_all_teams">All
            Teams</label>
          </td>
          <td>
            Assignment: <br/>
            <select id="selected_assignment">
              <option value="-1">All</option>
              <% @assignments.each do |assignment| %>
                  <% last_option_selected = '' %>
                  <% if assignment == @assignments.last then last_option_selected = ' selected="true"' end %>
                  <option value="<%= assignment.id%>" <%=last_option_selected%> >
                    <%= assignment.assignment_order %> . <%= assignment.name %>
                  </option>
              <% end %>
            </select>
          </td>
          <td>
            Filter by <%= nomenclature_assignment_or_deliverable %> status: <br/>
            <input id="filter_ungraded" class="filter_status" checked="true" type="checkbox"/><label for="filter_ungraded">Ungraded</label>
            <br/>
            <input id="filter_drafted" class="filter_status" checked="true" type="checkbox"/><label for="filter_drafted">Drafted</label><br/>
            <input id="filter_graded" class="filter_status" type="checkbox"/><label for="filter_graded">Graded</label>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <!--<h2>Search</h2>-->
</div>

<!--<div>-->
  <!--Legend for Grade Indicator:-->
  <!--<div id="graded">&nbsp;&nbsp;&nbsp;&nbsp;Graded</div>-->
  <!--<div id="drafted">&nbsp;&nbsp;&nbsp;&nbsp;Drafted</div>-->
  <!--<div id="ungraded">&nbsp;&nbsp;&nbsp;&nbsp;Ungraded</div>-->
<!--</div>-->

<div id="grading_queue_table">
  <div id="tabs">
    <ul>
      <li><a href="#tab-1">Team Deliverables</a></li>
      <li><a href="#tab-2">Individual Deliverables</a></li>
    </ul>
    <div id="tab-1">
      <%= render :partial => "deliverable_listing_professor_team", :locals => {:perspect => "team", :deliverables => @deliverables, :skip_course_column => true} %>
    </div>
    <div id="tab-2">
      <%= render :partial => "deliverable_listing_professor_individual", :locals => {:deliverables => @deliverables, :skip_course_column => true} %>
    </div>
  </div>
</div>
<br/>

<script>
    var assignment = "<%= nomenclature_assignment_or_deliverable %>";
    var name_column_index = 0;
    if (assignment == "Deliverable") {
        name_column_index = 1;
    }

    $(document).ready(function () {
        $("#tabs").tabs();

        //cache assignment id
        cache_assignments(); 

        var $search = $("#filterBoxOne");
        if ($search.prop("disabled") == true) {
            $search.val('');
            $search.removeAttr("disabled");
        }
        $(".sortable").tablesorter();
        $search.quicksearch('.sortable tbody tr');

        $("#filter_student").change(update_filter);
        $("#filter_assignment").change(update_filter);
//        $("#filter_graded").removeAttr("checked", false);

        //only display teams/individuals assigned to the professor/TA by default
        $("#filter_my_teams, #filter_all_teams").change(function () {
            update_teams($(this));
        });

        var statuses = ["graded", "ungraded", "drafted"];
        $('#filters').data('statuses', statuses);
        /*
        $.each(["graded", "ungraded", "drafted"], function (index, value) {
            if ($.session.get(value) == "false") {
                $("#filter_" + value).removeAttr("checked");
                filter(value);
            }
            */
//            else {
//                alert('Checking the checkbox with true');
//                $("#filter_" + value).prop("checked", "true");
//            }
       // });

        $(".filter_status").change(function () {
            var status = $(this).attr("id").replace("filter_", "");
            //filter(status);
            $("#selected_assignment").trigger("change");
            $.session.set(status, $("#filter_" + status).is(":checked"));
        });

        $("#selected_assignment").change(function(){
          $("#selected_assignment option:selected").each(function(){
            hide_unselected_assignments($(this).attr('value'));
            
          });
        }).trigger("change");
    });
    function update_filter() {
        var filters = [];
        if ($("#filter_student").is(':checked')) {
            filters.push(name_column_index);
        }
        if ($("#filter_assignment").is(':checked')) {
            filters.push(name_column_index + 1);
        }
        $(".sortable")[0].config.filter[0].filterColumns = filters;
        $(".sortable").trigger("doFilter");
    }

    function update_teams(elem) {
        if (elem.attr('value') === 'my_teams') {
            fetch_my_team_deliverables();
        } else if (elem.attr('value') === 'all_teams') {
            fetch_all_team_deliverables();
        }
    }
    function fetch_all_team_deliverables() {
        // call ajax
        $.get("deliverables", {
            teams: "all_teams"
        }).done(function (data) {
                    update_grading_queue_table(data);
                });
        $.session.set("allTeamsFetched", true);

    }
    function fetch_my_team_deliverables() {
        // call ajax
        $.get("deliverables", {
            teams: "my_teams"
        }).done(function (data) {
                    update_grading_queue_table(data);
                });
        $.session.set("allTeamsFetched", true);

    }
    // add rows to existring table
    function update_grading_queue_table(deliverables) {
        //$('#grading_queue_table').empty();
        //$('#grading_queue_table').html($(deliverables).find('#grading_queue_table').html());
        $('#tab-1').empty();
        $('#tab-1').html($(deliverables).find('#tab-1').html());
        $('#tab-2').empty();
        $('#tab-2').html($(deliverables).find('#tab-2').html());
        $("#tabs").tabs();
        $(".sortable").tablesorter();
        $("#selected_assignment").change(function(){
          $("#selected_assignment option:selected").each(function(){
            hide_unselected_assignments($(this).attr('value'));
            
          });
        }).trigger("change");
    }
    
    function hide_all_rows() {
      $("#grading_queue_table tbody tr").hide(); 
    }

    function hide_unselected_assignments(selectedIdString){
      var selectedId = parseInt(selectedIdString);
      var assignmentsId = $("#grading_queue_table").data('assignmentsId');

      hide_all_rows();
      assignmentsId.forEach(function(idString){
        var id = parseInt(idString);
        if(id <= selectedId) {
          $('#filters').data('statuses').forEach(function(s){
            if ($("#filter_" + s).is(':checked')){
              $("tr." + s + "." + id).show();
            } 
          });
        }
      });
    }
/*
    function filter(status) {
      $('#filters').data('statuses').forEach(function(s){
        if ($("#filter_" + s).is(':checked')){
          $("tr." + s).show();
        } else {
          $("tr." + s).hide();
        }
      });
    }
 */

    function cache_assignments(){
      var assignments = []
      $("#selected_assignment option").each(function() {
        assignments.push($(this).attr('value'));
      });

      $("#grading_queue_table").data('assignmentsId', assignments);
    }
</script>
