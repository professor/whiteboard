require 'spec_helper'
#require 'rubygems'
#require 'ruby-debug'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe AssignmentsController do

  # This should return the minimal set of attributes required to create a valid
  # Assignment. As you add validations to Assignment, be sure to
  # update the return value of this method accordingly.

  before do

    @assignment = FactoryGirl.create(:assignment_fse)
    @course = @assignment.course
    #debugger
    login(FactoryGirl.create(:faculty_frank))

  end
  def valid_due_date_parameters; {:date=>Date.today.strftime("%Y-%m-%d"), :hour=>'23', :minute=>'59'} end

  def valid_attributes
    {:maximum_score=>100, :course_id=>@course.id,:assignment_order=>1, :task_number=>1}
  end

  describe "GET index" do
    it "assigns all assignments as @assignments" do
      assignments = @course.assignments
      get :index, :course_id => @course.id
      assigns(:assignments).should eq(assignments)
    end
  end



  describe "GET new" do
    it "assigns a new assignment as @assignment" do
      get :new, :course_id => @course.id
      assigns(:assignment).should be_a_new(Assignment)
    end
  end

  describe "GET edit" do
    it "assigns the requested assignment as @assignment" do
     # assignment = Assignment.create! valid_attributes
      get :edit, :id => @assignment.id.to_s  , :course_id => @course.id
      assigns(:assignment).should eq(@assignment)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Assignment" do
        expect {
          post :create,:course_id => @course, :assignment => valid_attributes, :due_date => valid_due_date_parameters
        }.to change(Assignment, :count).by(1)
      end

      it "assigns a newly created assignment as @assignment" do
        post :create, :course_id => @course, :assignment => valid_attributes, :due_date => valid_due_date_parameters
        assigns(:assignment).should be_a(Assignment)
        assigns(:assignment).should be_persisted
      end

      it "redirects to the created assignment" do
        post :create,:course_id => @course, :assignment => valid_attributes, :due_date => valid_due_date_parameters
        response.should redirect_to(course_assignments_path)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved assignment as @assignment" do
        # Trigger the behavior that occurs when invalid params are submitted
        Assignment.any_instance.stub(:save).and_return(false)
        post :create, :course_id => @course,:assignment => {}, :due_date => valid_due_date_parameters
        assigns(:assignment).should be_a_new(Assignment)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Assignment.any_instance.stub(:save).and_return(false)
        post :create,:course_id => @course, :assignment => {}, :due_date => valid_due_date_parameters
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested assignment" do
        assignment = Assignment.create! valid_attributes
        # Assuming there are no other assignments in the database, this
        # specifies that the Assignment created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Assignment.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update,:course_id => @course, :id => assignment.id, :assignment => {'these' => 'params'}
      end

      it "assigns the requested assignment as @assignment" do
        assignment = Assignment.create! valid_attributes
        put :update, :course_id => @course,:id => assignment.id, :assignment => valid_attributes, :due_date => valid_due_date_parameters
        assigns(:assignment).should eq(assignment)
      end

      it "redirects to the assignment" do
        assignment = Assignment.create! valid_attributes
        put :update, :course_id => @course,:id => assignment.id, :assignment => valid_attributes, :due_date=>valid_due_date_parameters
        response.should redirect_to(course_assignments_path)
      end
    end

    describe "with invalid params" do
      it "assigns the assignment as @assignment" do
        assignment = Assignment.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Assignment.any_instance.stub(:save).and_return(false)
        put :update,:course_id => @course, :id => assignment.id.to_s, :assignment => {}, :due_date => valid_due_date_parameters
        assigns(:assignment).should eq(assignment)
      end

      it "re-renders the 'edit' template" do
        assignment = Assignment.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Assignment.any_instance.stub(:save).and_return(false)
        put :update,:course_id => @course, :id => assignment.id.to_s, :assignment => {}, :due_date => valid_due_date_parameters
        response.should render_template("edit")
      end
    end
  end


end
